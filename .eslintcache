[{"C:\\digital-clock\\src\\index.js":"1","C:\\digital-clock\\src\\App.js":"2","C:\\digital-clock\\src\\reportWebVitals.js":"3","C:\\digital-clock\\src\\components\\colon.jsx":"4","C:\\digital-clock\\src\\components\\DigitalCharacter.jsx":"5","C:\\digital-clock\\src\\components\\Day.jsx":"6","C:\\digital-clock\\src\\components\\usewindowsize.jsx":"7","C:\\digital-clock\\src\\components\\Digitalclock.jsx":"8","C:\\digital-clock\\src\\components\\alarm.jsx":"9","C:\\digital-clock\\src\\components\\timer.jsx":"10","C:\\digital-clock\\src\\components\\Sound.js":"11"},{"size":500,"mtime":1606941869908,"results":"12","hashOfConfig":"13"},{"size":2135,"mtime":1613662731679,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1606941869908,"results":"15","hashOfConfig":"13"},{"size":1167,"mtime":1612480623798,"results":"16","hashOfConfig":"13"},{"size":9232,"mtime":1612377735377,"results":"17","hashOfConfig":"13"},{"size":15269,"mtime":1612401409594,"results":"18","hashOfConfig":"13"},{"size":606,"mtime":1605219350169,"results":"19","hashOfConfig":"13"},{"size":9689,"mtime":1613682094523,"results":"20","hashOfConfig":"13"},{"size":5010,"mtime":1613664712663,"results":"21","hashOfConfig":"13"},{"size":9578,"mtime":1613761351499,"results":"22","hashOfConfig":"13"},{"size":921,"mtime":1613667684518,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gk1jl5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\digital-clock\\src\\index.js",[],["50","51"],"C:\\digital-clock\\src\\App.js",[],"C:\\digital-clock\\src\\reportWebVitals.js",[],"C:\\digital-clock\\src\\components\\colon.jsx",[],["52","53"],"C:\\digital-clock\\src\\components\\DigitalCharacter.jsx",[],"C:\\digital-clock\\src\\components\\Day.jsx",[],"C:\\digital-clock\\src\\components\\usewindowsize.jsx",[],"C:\\digital-clock\\src\\components\\Digitalclock.jsx",["54","55","56","57"],"import React, {useRef,useState, useEffect,useContext} from 'react'\r\nimport {APPLContext} from './../App'\r\nimport '../App.css';\r\n//import Sound from './Sound.js'\r\nimport alarmsound from './../Sounds/alarmsound.mp3'\r\nimport useWindowDimensions from './usewindowsize'\r\nimport DigitalCharacter from './DigitalCharacter'\r\nimport Colon from './colon'\r\nimport Day from './Day'\r\n\r\n\r\n//import { getByDisplayValue } from '@testing-library/react';\r\n\r\n\r\n//main digital clock routine\r\nconst  Digitalclock = () => {\r\n  const { width } = useWindowDimensions();\r\n  const [date, setDate] = useState(new Date());\r\n  const aPPLContext = useContext(APPLContext)\r\n  const hr1digit = useRef('');\r\n  const hr2digit = useRef('');\r\n  const min1digit = useRef('');\r\n  const min2digit = useRef('');\r\n  const second1digit = useRef('');\r\n  const second2digit = useRef('');\r\n  const AMPMCharterChange = useRef('');\r\n  const day = useRef('');\r\n  const month = useRef('');\r\n  const year = useRef('');\r\n  const daydate = useRef('');\r\n  const countdowntime = useRef('');\r\n  const timersec = useRef('');\r\n  const timermin = useRef('');\r\n  let  [,setState]=useState();\r\n  const isPlaying = useRef(false);\r\n  const audioRef = useRef(new Audio(alarmsound));\r\n  \r\n\r\n  //<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n \r\n\r\n \r\n //checks for hour and then splits the hour into two digits which are displayed in the seven segement LED\r\n const hourtime = () =>{\r\n  \r\n  let hr=date.getHours().toString()\r\n  \r\n  if(hr==='0'){\r\n    hr='12'\r\n  }\r\n  if (hr<10){\r\n    \r\n    hr1digit.current = '0'\r\n    hr2digit.current = hr \r\n  }\r\n   if (hr>=10){\r\n    hr1digit.current = hr.slice(0, 1);\r\n    hr2digit.current = hr.slice(1, 2); \r\n   \r\n   }\r\n\r\n   //covert to regular time\r\n   if (hr>=13){\r\n   \r\n    hr = hr-12\r\n    \r\n    if (hr<10){\r\n      \r\n      hr1digit.current = '0'\r\n      hr2digit.current = hr.toString() \r\n      \r\n    }\r\n     if (hr>=10){\r\n     \r\n      hr1digit.current = hr.toString().slice(0, 1);\r\n      hr2digit.current = hr.toString().slice(1, 2); \r\n     \r\n     } \r\n   }\r\n\r\n   let ap=date.getHours().toString()\r\n   //console.log(ap)\r\n   if (ap >=12){\r\n    AMPMCharterChange.current = 'P'\r\n   }\r\n   else{\r\n    AMPMCharterChange.current = 'A'\r\n   }\r\n }\r\n\r\n //cal minutes\r\n const mintime = () =>{\r\n  \r\n  let min=date.getMinutes().toString()\r\n  if (min<10){\r\n    min1digit.current = '0'\r\n    min2digit.current = min \r\n  }\r\n   if (min>=10){\r\n    min1digit.current = min.slice(0, 1);\r\n    min2digit.current = min.slice(1, 2); \r\n   \r\n   }\r\n }\r\n\r\n //cal seconds\r\n const sectime = () =>{\r\n  \r\n  let sec=date.getSeconds().toString()\r\n  if (sec<10){\r\n    second1digit.current = '0'\r\n    second2digit.current = sec \r\n  }\r\n   if (sec>=10){\r\n    second1digit.current = sec.slice(0, 1);\r\n    second2digit.current = sec.slice(1, 2); \r\n   \r\n   }\r\n }\r\n\r\n //cal of week which returns a number from 0-6 - 0=Sunday .....\r\n const daytime = () =>{\r\n  let d = new Date();\r\n    day.current = d.getDay().toString() \r\n }\r\n\r\n //cal month which returns back 0-11 0=Jan\r\n const monthtime = () =>{\r\n  let d = new Date();\r\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n  month.current = monthNames[d.getMonth()] \r\n}\r\n\r\n//cal year\r\nconst yeartime = () =>{\r\n  let d = new Date();\r\n  year.current = d.getFullYear() \r\n}\r\n\r\n\r\n//cal the calander date of the current day\r\nconst calendardatetime = () =>{\r\n  let d = new Date();\r\n  daydate.current = parseInt(d.getDate()) \r\n  //console.log(daydate.current)\r\n}\r\n\r\n\r\n\r\n//sets off the alarm when alarm time matches current time\r\nconst checkAlarmSet = () => {\r\n\r\n  let hr = hr1digit.current + hr2digit.current\r\n  let min = min1digit.current + min2digit.current\r\n  let ampm =  AMPMCharterChange.current + 'M'\r\n \r\n//  let context = new (window.AudioContext || window.webkitAudioContext || false)();\r\n // if (context) {\r\n    // Do whatever you want using the Web Audio API\r\n //   console.log('exists')\r\n    // ...\r\n//} else {\r\n    // Web Audio API is not supported\r\n    // Alert the user\r\n //   alert(\"Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version or downloading Google Chrome or Mozilla Firefox\");\r\n//}\r\n // let note = new Sound(context);\r\n // let now = context.currentTime;\r\n  \r\n\r\n   if( parseInt(hr) === parseInt(aPPLContext.hr) &&  parseInt(min) === parseInt(aPPLContext.min) &&  ampm === aPPLContext.ampm &&  aPPLContext.alarmflag ==='on'){\r\n    \r\n    isPlaying.current = true\r\n    if(isPlaying.current === true){\r\n      audioRef.current.play();\r\n    }\r\n   // console.log(context.currentTime)\r\n     \r\n   //  note.play(520.00, now + 2 );\r\n   //  note.play(600.63, now + 1.5);\r\n   //  note.play(802.18, now + 1);\r\n   //  note.play(1864.66, now  );\r\n   //  note.play(1479.98, now + 1.5);\r\n   //  note.play(1244.51, now + 2);\r\n   //  note.play(155.56, now );\r\n   //  note.play(1479.98, now + .5);\r\n   //  note.play(783.99, now + 2.5);\r\n   //  note.play(1864.66, now );\r\n   //  note.play(1479.98, now  + .5);\r\n   //  note.play(659.25, now + 1.5);\r\n   //  note.play(783.99, now + .5);\r\n   \r\n   \r\n   }\r\n   else{\r\n    isPlaying.current = false\r\n    audioRef.current.pause()\r\n   }\r\n }\r\n\r\n useEffect(() => {\r\n  var tkID = setInterval( () => tick(), 1000 );\r\n  \r\n  return function cleanup() {\r\n      clearInterval(tkID);\r\n    };\r\n\r\n    \r\n },[]);\r\n\r\n //set new date on every second\r\n   function tick() {\r\n    setDate(new Date());\r\n    \r\n   }\r\n\r\n  \r\n  // useEffect(() => {\r\n //   if (isPlaying.current === true) {\r\n  //    audioRef.current.play();\r\n //   } else {\r\n //     audioRef.current.pause();\r\n //   }\r\n // }, [isPlaying]);\r\n\r\n mintime()\r\n hourtime()\r\n sectime()\r\n daytime()\r\n calendardatetime()\r\n monthtime()\r\n yeartime()\r\n checkAlarmSet()\r\n \r\n\r\n //check screen to see if it is mobile or desk top\r\n if(width <= 414){\r\n   return(\r\n    <div className=\"clockbackground\">\r\n          \r\n    <div    className='svgbborderbox' >\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\"  width='88%' height='93%' viewBox=\"-1 10 65 100\" className='svgbox'>\r\n   \r\n    <DigitalCharacter num={hr1digit.current} fillcolor='#18dbdb' xval='-2' yval='-55'/>\r\n    <DigitalCharacter num={hr2digit.current} fillcolor='#18dbdb' xval='10' yval='-55'/>\r\n    <Colon fillcolor='yellow' xval='-9' yval='-37'screenwidth={width}/>\r\n    <DigitalCharacter num={min1digit.current} fillcolor='#18dbdb' xval='-2' yval='-28'/>\r\n    <DigitalCharacter num={min2digit.current} fillcolor='#18dbdb' xval='10' yval='-28'/>\r\n    <Colon fillcolor='yellow' xval='-9' yval='-11'screenwidth={width}/>\r\n    <DigitalCharacter num={second1digit.current} fillcolor='#18dbdb' xval='-2' yval='-2'/>\r\n    <DigitalCharacter num={second2digit.current} fillcolor='#18dbdb' xval='10' yval='-2'/>\r\n    <Colon fillcolor='yellow' xval='-9' yval='16' screenwidth={width}/>\r\n    <DigitalCharacter num={ AMPMCharterChange.current} fillcolor='#18dbdb' xval='-2' yval='25'/>\r\n    <DigitalCharacter num='M' fillcolor='#18dbdb' xval='10' yval='25'/>\r\n    <Day dayval={day.current} fillcolor='red' screenwidth={width}/>\r\n    <text x=\"6.5\" y=\"109\"font-family=\"Arial\" font-size='9' fill=\"blue\">{month.current} {daydate.current}/{year.current}</text>\r\n     <path d=\"m 6.9,110.782259 0.0942,2.052062 1.318824,3.078094 2.637647,2.145336 18.463531,-0.09327 v -6.90239 z\" fill='white' />\r\n     <path d=\" m 55.77928,110.782259 -0.0942,2.052062 -1.31883,3.078094 -2.637642,2.145336 -18.463532,-0.09327 v -6.90239 z\" fill='white'/>\r\n     <text x=\"13\" y=\"115.782259\"font-family=\"Arial\" font-size='5' fill=\"red\">Alarm</text>\r\n     <text x=\"37.5\" y=\"115.782259\"font-family=\"Arial\" font-size='5' fill=\"red\">Timer</text>\r\n   \r\n  </svg>\r\n  \r\n  </div>\r\n  \r\n</div>\r\n   )\r\n }\r\n else{\r\n  return (\r\n    <div className=\"App\">\r\n          \r\n          <div    className='svgbborderbox'>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"  width='600px' height='250px' viewBox=\"0 0 120 60\" className='svgbox'>\r\n         \r\n          <DigitalCharacter num={hr1digit.current} fillcolor='#18dbdb' xval='-35' yval='-53'/>\r\n          <DigitalCharacter num={hr2digit.current} fillcolor='#18dbdb' xval='-24' yval='-53'/>\r\n          <Colon fillcolor='yellow' xval='-24' yval='-53' screenwidth={width}/>\r\n          <DigitalCharacter num={min1digit.current} fillcolor='#18dbdb' xval='-6' yval='-53'/>\r\n          <DigitalCharacter num={min2digit.current} fillcolor='#18dbdb' xval='5' yval='-53'/>\r\n          <Colon fillcolor='yellow' xval='5.2' yval='-53' screenwidth={width}/>\r\n          <DigitalCharacter num={second1digit.current} fillcolor='#18dbdb' xval='23' yval='-53'/>\r\n          <DigitalCharacter num={second2digit.current} fillcolor='#18dbdb' xval='34' yval='-53'/>\r\n          <Colon fillcolor='yellow' xval='36' yval='-53' screenwidth={width}/>\r\n          <DigitalCharacter num={ AMPMCharterChange.current} fillcolor='#18dbdb' xval='55' yval='-53'/>\r\n          <DigitalCharacter num='M' fillcolor='#18dbdb' xval='68' yval='-53'/>\r\n          <Day dayval={day.current} fillcolor='red' screenwidth={width}/>\r\n          <text x=\"28.5\" y=\"54.5\"font-family=\"Arial\" font-size='11' fill=\"blue\">{month.current} {daydate.current}/{year.current}</text>\r\n          <path d=\"m 0.9,47 0.0942,2.052062 1.318824,3.078094 2.637647,2.145336 18.463531,-0.09327 v -6.90239 z\" fill='#18dbdb'/>\r\n          <path d=\" m 118,47 -0.0942,2.052062 -1.31883,3.078094 -2.637642,2.145336 -18.463532,-0.09327 v -6.90239 z\" fill='#18dbdb'/>\r\n          <text x=\"6\" y=\"52\"font-family=\"Arial\" font-size='5' fill=\"red\">Alarm</text>\r\n          <text x=\"100\" y=\"52\"font-family=\"Arial\" font-size='5' fill=\"red\">Timer</text>\r\n        </svg>\r\n        \r\n        \r\n        </div>\r\n     \r\n    </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default Digitalclock;\r\n","C:\\digital-clock\\src\\components\\alarm.jsx",[],"C:\\digital-clock\\src\\components\\timer.jsx",["58","59","60"],"import React,{useState,useRef,useEffect} from 'react';\r\n\r\nimport Sound from './Sound.js'\r\nimport alarmsound from './../Sounds/alarmsound.mp3'\r\n\r\nimport './../App.css'\r\n\r\nconst Timer = (props) => {\r\n   // const closebuttonstyle = useRef('staticclosebtn');\r\n   // const countdowntime = useRef('');\r\n   // const timersec = useRef('');\r\n    const timermin = useRef(0);\r\n    const timerhr = useRef(0);\r\n    const doonceflag = useRef(true)\r\n    const [startstopflag, setstartstopflag] = useState(true);\r\n    const [count, setcount] = useState()\r\n    const [mincountdown, setmincountdown] = useState()\r\n    const [hrcountdown, sethrcountdown] = useState()\r\n    const [seccountdown, setseccountdown] = useState()\r\n    const [soundonoff, setsoundonoff] = useState(false)\r\n    const isPlaying = useRef(false);\r\n    //const audioRef1 = useRef(new Audio(alarmsound));\r\n    const [audioRef1] = useState(new Audio(alarmsound));\r\n\r\n    let  [,setState]=useState();\r\n\r\n    const openTimer = ()  => {\r\n        \r\n        setState({});\r\n        document.getElementById(\"Timerboxcontainer\").style.width= \"340px\";\r\n        document.getElementById(\"Timerboxcontainer\").style.height= \"360px\";\r\n        \r\n      }\r\n      \r\n    const  closeTimer = () => {\r\n        \r\n        setState({});\r\n        document.getElementById(\"Timerboxcontainer\").style.width = \"0px\";\r\n        document.getElementById(\"Timerboxcontainer\").style.height= \"0px\";\r\n      }\r\n\r\n    const IncreaseThrbutton = () =>{\r\n        \r\n        \r\n        if (hrcountdown <=11 ){\r\n       \r\n        sethrcountdown(hrcountdown=>hrcountdown+1) \r\n       \r\n        \r\n        }else{\r\n            sethrcountdown(0)\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    const decreaseThrbutton = () =>{\r\n        \r\n        if (hrcountdown > 0 ){\r\n            sethrcountdown(hrcountdown=>hrcountdown-1)\r\n         \r\n        \r\n        }else{\r\n            sethrcountdown(12)\r\n        }\r\n    }\r\n\r\n    const IncreaseTminbutton = () =>{\r\n        \r\n        \r\n        if (mincountdown <=58 ){\r\n            setmincountdown(mincountdown=>mincountdown+1)\r\n        \r\n        } else{\r\n            setmincountdown(0)\r\n        }\r\n        \r\n    }\r\n\r\n    const decreaseTminbutton = () =>{\r\n        \r\n       \r\n        if (mincountdown > 0 ){\r\n            setmincountdown(mincountdown=>mincountdown-1)\r\n       \r\n        \r\n        }else{\r\n            setmincountdown(59)\r\n        }\r\n    }\r\n\r\n    const start = () =>{  \r\n        setstartstopflag(true)\r\n        setsoundonoff(false)\r\n        setmincountdown(mincountdown)\r\n        let x=0\r\n        x=seccountdown+(mincountdown*60)+(hrcountdown*60*60)\r\n\r\n        console.log(x)\r\n        console.log('start min = '+mincountdown)\r\n        setcount(x)\r\n        \r\n        \r\n    }\r\n\r\n    const stop = () =>{  \r\n          \r\n        \r\n        setstartstopflag(false)\r\n        let x=0\r\n        x=seccountdown+(mincountdown*60)+(hrcountdown*60*60)\r\n\r\n        console.log( 'count seccount=:' + x)\r\n        setcount(x)\r\n        setsoundonoff(false)\r\n        isPlaying.current = false\r\n    audioRef1.pause()\r\n    document.getElementById('beep').muted = true\r\n    document.getElementById('beep').pause();\r\n    }\r\n    \r\n    const Reset = () =>{  \r\n          \r\n        \r\n        setstartstopflag(false)\r\n        setmincountdown(mincountdown => mincountdown = 0)\r\n        sethrcountdown(hrcountdown => hrcountdown = 0)\r\n        setseccountdown(seccountdown => seccountdown = 0)\r\n        let x=0\r\n        x=seccountdown+(mincountdown*60)+(hrcountdown*60*60)\r\n\r\n       console.log( 'reset count=:' + x)\r\n        setcount(x)\r\n        setsoundonoff(false)\r\n        isPlaying.current = false\r\n    audioRef1.pause()\r\n    document.getElementById('beep').muted = true\r\n    document.getElementById('beep').pause();  \r\n    }\r\n\r\n    const playalarmsound = () =>{\r\n        \r\n        \r\n        if(isPlaying.current === true ){\r\n            if(!audioRef1.isPlaying)\r\n            {\r\n                \r\n                //audioRef1.play()\r\n                document.getElementById('beep').muted = false\r\n                document.getElementById('beep').play();\r\n            }\r\n          \r\n        }\r\n        else{\r\n            isPlaying.current = false\r\n            audioRef1.pause()\r\n            console.log('in here soundonoff = ' + soundonoff)\r\n        }\r\n    }\r\n  \r\n    //main loop for counting down the timer\r\n    useEffect(\r\n        ()=>{\r\n           \r\n            let intervaltimerId\r\n            \r\n\r\n           // init all varaibles to 0\r\n           if(doonceflag.current){\r\n            const x = 0\r\n            \r\n             const sc = x%60\r\n             const totalmin = Math.floor(x/60)\r\n             timerhr.current = Math.floor(x/3600)\r\n            setcount(x)\r\n            setseccountdown(sc)\r\n            setmincountdown(timermin.current)\r\n            sethrcountdown(timerhr.current)\r\n            doonceflag.current=false\r\n           }\r\n           \r\n            if (count > 0 && startstopflag){\r\n                intervaltimerId=setInterval(() => {\r\n                    \r\n                    \r\n                   const x = count - 1\r\n                  // console.log('inside interval =' +x)\r\n                   const sc = x%60\r\n                   const totalmin = Math.floor(x/60)\r\n                   timerhr.current = Math.floor(x/3600) \r\n\r\n                   //formats min box based on total mins on edge cases example 1:01 .. 1:00\r\n                   if(totalmin > 0 ){\r\n                       console.log('totalmins inside interval and greater then 0 = '+totalmin)\r\n                       if (totalmin > 60){\r\n                       const divmin = (totalmin % 60)\r\n                       //console.log(divmin)\r\n                       console.log('totalmins inside interval and greater then 60 = '+totalmin)\r\n                       timermin.current = divmin\r\n                       \r\n                            }else{\r\n                               \r\n                                if ((totalmin % 60)===0){\r\n                                    timermin.current = 0\r\n                                    console.log('totalmins inside interval and less then 60 {}P{P}P= '+(totalmin % 60))\r\n                                    //timermin.current = totalmin\r\n                                }else{\r\n                                    console.log('totalmins inside interval and less then 60 = '+totalmin)\r\n                                   \r\n                                timermin.current = totalmin//(totalmin % 60)\r\n                                timerhr.current = 0\r\n                               \r\n                            }\r\n\r\n                            }\r\n                   }\r\n                   \r\n                   if (x <= 59 ){\r\n                    timermin.current = 0\r\n                    \r\n                }\r\n                if (x===0){\r\n                    console.log(isPlaying.current)\r\n                    setsoundonoff(true)\r\n                    isPlaying.current = true\r\n                    console.log(isPlaying.current)\r\n                    playalarmsound()\r\n                }\r\n\r\n               \r\n             \r\n                   if(x >= 0){\r\n                   setcount(x)\r\n                   setseccountdown(sc)\r\n                   setmincountdown(timermin.current)\r\n                   sethrcountdown(timerhr.current)\r\n                   }\r\n                }, 1000);  \r\n            } \r\n            return ()=>clearInterval(intervaltimerId)\r\n           \r\n        },[count,mincountdown,hrcountdown,seccountdown,startstopflag,soundonoff])\r\n\r\n        useEffect(() => {\r\n            window.addEventListener('touchstart', () => {\r\n              document.getElementById('beep').muted = true\r\n              document.getElementById('beep').play()\r\n            })\r\n          }) \r\n    \r\n\r\n        //play alarm for timer\r\n      //  useEffect(() => {\r\n      //      const interval2 = setInterval(() => {\r\n       //         if (soundonoff){\r\n      //              playalarmsound() \r\n       //         }\r\n       //     }, 1000);\r\n       //     return () => clearInterval(interval2);\r\n       //   }, [soundonoff]);  \r\n     //    \r\n    \r\n      \r\n    return(\r\n        <div >\r\n            <audio id=\"beep\" src={alarmsound} />\r\n             <div id='Timerboxcontainer'  className='Timerboxdetail' >\r\n                <div className='Closebutton'onClick={() => closeTimer()}>\r\n                    X\r\n                </div>\r\n                <div>\r\n                    <div className='incrementhrbutton' value={hrcountdown} onClick={() => IncreaseThrbutton()} >+</div>\r\n                    <div className='hour'>h {hrcountdown}</div>\r\n                    <div className='decrementhrbutton' onClick={() => decreaseThrbutton()}>-</div>\r\n                   \r\n                    <div className='incrementminbutton' value={mincountdown} onClick={() => IncreaseTminbutton()}>+</div>\r\n                    <div className='min'>m {mincountdown}</div>\r\n                    <div className='decrementminbutton' onClick={() => decreaseTminbutton()}>-</div>\r\n                    \r\n                    <div className='timerseconds'>s {seccountdown}</div>\r\n                    <div className='starttimerbutton' value={mincountdown} onClick={() => start()}>Start</div>\r\n                    <div className='stoptimerbutton' onClick={() => stop()}>Stop</div>\r\n                    <div className='resettimerbutton' onClick={() => Reset()}>Reset</div>\r\n                   \r\n                </div>\r\n            </div>\r\n            <div className='Timerbutton' onClick={() => openTimer()}  ></div>\r\n\r\n       \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nexport default Timer","C:\\digital-clock\\src\\components\\Sound.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":31,"column":9,"nodeType":"69","messageId":"70","endLine":31,"endColumn":22},{"ruleId":"67","severity":1,"message":"71","line":32,"column":9,"nodeType":"69","messageId":"70","endLine":32,"endColumn":17},{"ruleId":"67","severity":1,"message":"72","line":33,"column":9,"nodeType":"69","messageId":"70","endLine":33,"endColumn":17},{"ruleId":"67","severity":1,"message":"73","line":34,"column":10,"nodeType":"69","messageId":"70","endLine":34,"endColumn":18},{"ruleId":"67","severity":1,"message":"74","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":13},{"ruleId":"67","severity":1,"message":"75","line":173,"column":20,"nodeType":"69","messageId":"70","endLine":173,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":242,"column":11,"nodeType":"78","endLine":242,"endColumn":81,"suggestions":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],["80"],["81"],"no-unused-vars","'countdowntime' is assigned a value but never used.","Identifier","unusedVar","'timersec' is assigned a value but never used.","'timermin' is assigned a value but never used.","'setState' is assigned a value but never used.","'Sound' is defined but never used.","'totalmin' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playalarmsound'. Either include it or remove the dependency array.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [count, mincountdown, hrcountdown, seccountdown, startstopflag, soundonoff, playalarmsound]",{"range":"85","text":"86"},[7418,7488],"[count, mincountdown, hrcountdown, seccountdown, startstopflag, soundonoff, playalarmsound]"]